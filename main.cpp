#include <iostream>
#include <utility>
#include "utils.h"

/*
 1. Цель:
 Разработать программу которая будет выполнять задачу "Ханойская башня". Входными данными является количество дисков n с которыми будет работать программа.
 Выходные данные - визуализация перехода данных из начального положения в конечное. Количество ходов 2^n - 1. Каждый ход должен строго соответствовать правилам
 алгоритма, то есть переместить один верхний диск и запрет на помещение большего диска на меньший

 2. Построение модели:
 Диски: Идентифицируются своим размером , то есть числом от 1 до n
 Стержни: Идентифицируются своими именами pole1, pole2, pole3
 Состояние: Неявно управляется стеком вызовов рекурсивной функции. Его задача — перенести k дисков с одного стержня на другой

 3. Построение алгоритма:
  На вход функции входят число (длина диска), название башни на которой находится диск, стержень на который должен переместиться диск и вспомогательный стержень
  Псеводкод:
  func (n , A, C, B) {
    if n == 0
        завершить работу
    else if n == 1
        вывести перемещение с pole1 на pole3
    else
        func (n - 1, pole1, pole3, pole2)
        вывести перемещение с pole1 на pole 2
        func(n - 1, pole3, pole2, pole1)
  }

  4. Проерка правильности алгоритма:

 */

// 5. реализация алгоритма в виде программы
class Solution {
public:
    int n;
    long long counter = 0;
    std::string pole1 = "A";
    std::string pole2 = "B";
    std::string pole3 = "C";
    //const std::vector<std::string> poles = {"A", "B", "C"};
    // (n, source, target, auxiliary) A C B
    void func(int n, std::string& pole1, std::string& pole3, std::string& pole2) {
        if (n <= 0)
            return;
        if (n == 1) {
            counter++;
            std::cout << "Ход " << counter << ": ";
            std::cout << "Переместить диск 1 со стержня " << pole1 << " на стержень " << pole3 << std::endl;
        }
        else {
            func(n - 1, pole1, pole2, pole3);
            counter++;
            std::cout << "Ход " << counter << ": ";
            std::cout << "Переместить диск " << n << " со стержня " << pole1 << " на стержень " << pole3 << std::endl;
            func(n - 1, pole2, pole3, pole1);
        }
    }

    void solveHanoi(int disks) {
        n = disks;
        counter = 0;
        std::cout << "Решение для " << n << " дисков:" << std::endl;
        func(n, pole1, pole3, pole2);
        std::cout << "Всего ходов: " << counter << std::endl;
    }

    void printTower () {
        for (int i = 0; i < n; i++) {

        }
    }
};

int main () {
    Solution solv;
    int n;
    std::cout << "Введите количество дисков для решения задачи: " << std::endl;
    std::cin >> n;
    solv.solveHanoi(n);
}

/*
6. Анализ алгоритма и его сложности:
алгоритм выполняется за 2^n - 1
Время выполнения алгоритма O(2^n)
Пространственная сложность O(1)


7. Проверка программы:

8. Cоставление документации:

 */